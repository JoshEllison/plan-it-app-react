{"version":3,"sources":["components/Header.js","components/TheList.js","components/Lists.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","title","searchChange","e","_this","setState","target","value","onFormSubmit","preventDefault","props","submit","react_default","a","createElement","className","onSubmit","this","handleSearch","type","placeholder","onChange","Component","TheList","Lists","components_TheList","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","handleCreateList","clearForm","handleChange","defineProperty","id","imageURL","description","onClick","toggle","show","App","currentView","listTasks","filtered","likeCount","doneCount","handleView","bind","assertThisInitialized","fetchLists","updateArray","sortLists","setLists","removeFromArray","handleAnswer","list","_this2","fetch","body","JSON","stringify","method","headers","Accept","Content-Type","then","createdList","json","jData","catch","err","console","log","array","prevState","concat","toConsumableArray","arrayIndex","splice","view","_this3","data","lists","completedLists","todoLists","forEach","completed","push","todoList","newList","filter","item","lc","toLowerCase","includes","components_Header","components_Form","components_Lists","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a3935ae.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Header extends Component {\n\n  state= {\n    title: '',\n  }\n\n  searchChange = (e) => {\n    //get whats being typed into the input\n    this.setState({title: e.target.value});\n  }\n\n  onFormSubmit = (e) => {\n    e.preventDefault();\n    //Function passed in from app\n    this.props.submit(this.state.title);\n    //clear input field\n    this.setState({title: ''});\n  }\n\n  render () {\n    return (\n      <div className=\"header\">\n          <h1>Buckidea</h1>\n          <form onSubmit={this.handleSearch}>\n             <input className=\"form-input\" type=\"Text\" value={this.state.title} placeholder=\"Search the Bucket List\" onChange={this.searchChange} />\n         </form>\n\n      </div>\n    )\n  }\n}\n\n\nexport default Header;\n","import React, { Component } from 'react'\n\n\n\nclass TheList extends Component {\n  render () {\n    return (\n      <div className=\"task-list\">\n        this is TheList\n      </div>\n    )\n  }\n}\n\n\n\nexport default TheList;\n","import React, { Component } from 'react'\nimport TheList from './TheList'\n\nclass Lists extends Component {\n  render () {\n    return (\n      <div className=\"lists\">\n       <TheList />\n      </div>\n    )\n  }\n}\n\n\n\nexport default Lists;\n","import React, { Component } from 'react'\n\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: '',\n      imageURL: '',\n      description: ''\n    }\n  }\n  // submit form\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.props.handleCreateList(this.state)\n    this.clearForm()\n  }\n\n  // store input title value to state\n  handleChange = (event) => {\n    this.setState({\n      // [event.target.id] Identifier which placeholder should be used\n      [event.target.id]: event.target.value\n    })\n    // console.log(event.target.id);\n  }\n\n  // clear the placeholder after submit\n  clearForm = () => {\n    this.setState({\n       title: '',\n       imageURL: '',\n       description: ''\n     })\n  }\n\n  render () {\n    return (\n      <div className=\"form\" onSubmit={this.handleSubmit}>\n        <h2 onClick={this.props.toggle} >Click to Add Your Bucket List</h2>\n        {this.props.show ?\n          <form>\n           <input type='text'\n           className=\"add_form\"\n           placeholder=\"Title\"\n           id='title'\n           onChange={this.handleChange}\n           value={this.state.title}\n           />\n           <input type='text'\n           className=\"add_form\"\n           placeholder=\"Image URL\"\n           id='imageURL'\n           onChange={this.handleChange}\n           value={this.state.imageURL}\n           />\n           <input type='text'\n           className=\"add_form\"\n           placeholder=\"Description\"\n           id='description'\n           onChange={this.handleChange}\n           value={this.state.description}\n           />\n           <button type=\"submit\" className=\"submit-button\">Add List</button>\n          </form>\n          : ''}\n\n      </div>\n\n    )\n  }\n}\n\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Lists from './components/Lists'\nimport Form from './components/Form'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentView: 'list',\n      listTasks: [],\n      filtered: [],\n      toggle: false,\n      likeCount: 0,\n      doneCount: 0\n\n    }\n    // Add binds below\n    this.handleView = this.handleView.bind(this)\n    this.fetchLists = this.fetchLists.bind(this)\n    this.updateArray = this.updateArray.bind(this)\n    this.sortLists = this.sortLists.bind(this)\n    this.setLists = this.setLists.bind(this)\n    this.handleCreateList = this.handleCreateList.bind(this)\n    this.removeFromArray = this.removeFromArray.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n    this.handleAnswer = this.handleAnswer.bind(this)\n    }\n\n  // create a list from server\n  handleCreateList(list) {\n    // add server address later\n    // should this be 'http://localhost:3000/lists',\n//https://buckidea-api.herokuapp.com/\n    fetch('https://buckidea-api.herokuapp.com/', {\n      body: JSON.stringify(list),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then( createdList => createdList.json())\n    .then(jData => {\n      this.updateArray(jData, 'listTasks')\n      this.handleView('list')\n\n    })\n    .catch(err => console.log(err))\n  }\n\n\n  updateArray(list,array){\n    this.setState( prevState => ({\n      [array]:[...prevState[array],list]\n    }))\n  }\n\n\n  removeFromArray(array, arrayIndex){\n    this.setState(prevState => {\n      prevState[array].splice(arrayIndex, 1)\n      return {\n        [array]: prevState[array]\n      }\n    })\n    // this.setState( prevState => ({\n    //   [array]: [...prevState[array].splice(arrayIndex, 1)]\n    // }))\n  }\n\n  handleView(view) {\n    // updating state causes a render\n    this.setState({\n      currentView: view\n    })\n  }\n\n  // show and hide create form\n  handleAnswer() {\n    this.setState({\n      toggle: !this.state.toggle\n    })\n  }\n\n  fetchLists() {\n    fetch('http://localhost:3000/lists')\n    // http://herokuaddress/bucketlists\n    // should this be 'http://localhost:3000/lists'\n    //https://buckidea-api.herokuapp.com/\n     .then( data => data.json())\n     .then( jData => {\n       console.log('this is jData', jData)\n       this.sortLists(jData)\n     })\n  }\n\n  sortLists(lists){\n   let completedLists = []\n   let todoLists = []\n   // if it's a single param then you don't need the parens - task\n   // it there are 2 params then yes...( task, index )\n   lists.forEach( list => {\n     if(list.completed) {\n       completedLists.push(list)\n     } else {\n       todoLists.push(list)\n     }\n   })\n   this.setLists(completedLists, todoLists)\n }\n\n setLists(completed,list){\n   this.setState({\n     completedLists: completed,\n     todoList: list\n   })\n }\n\n\n\n\n  // run one time only lifecycle method...\n  componentDidMount() {\n     this.fetchLists()\n  }\n\n  //search bar\n  onTitleName(title) {\n    // will be added by Kim\n  }\n\n  handleSearch(e) {\n    // Variable to hold the original version of the list\n    let currentList = [];\n    let newList = [];\n    // If the search bar isn't empty\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.state.listTasks;\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase();\n        // change search term to lowercase\n        const filter = e.target.value.toLowerCase();\n        return lc.includes(filter);\n      });\n    } else {\n      newList = this.state.listTasks;\n    }\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render () {\n    return (\n      <div className=\"main-container\">\n        <Header\n          submit={this.handleSearch}\n          title={this.state.title}\n        />\n\n        <Form\n          handleCreateList={this.handleCreateList}\n          show={this.state.toggle}\n          toggle={this.handleAnswer}\n        />\n        <Lists\n          currentView={this.state.currentView}\n          handleView={this.handleView}\n          listTasks={this.state.listTasks}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}